import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { SelectedIndexChangedEventData } from "nativescript-drop-down";
import { Image, Label, Color, TouchGestureEventData, GridLayout, } from "tns-core-modules/";

import { registerElement } from 'nativescript-angular/element-registry';
import { CanvasView, Canvas, Paint } from 'nativescript-canvas';
registerElement('CanvasView', () => CanvasView);

@Component({
  selector: 'app-auto-generated',
  templateUrl: './auto-generated.component.html',
  styleUrls: ['./auto-generated.component.css']
})

// issues: 
// -campus map / marker doesn't render (using sample images for now)
// -touch should display dropdown programmatically 
// -get coordinates on touch and draw path based on marker       
export class AutoGeneratedComponent implements OnInit {

  public x: number;
  public y: number;

  public page;

  canvas: Canvas;
  paint: Paint;

  constructor() {}
 
  ngOnInit() {}

  public getCoords(xc, yc) {
    this.x = xc;
    this.y = yc;
  }

  // drop down
  @ViewChild('dd', { static: true }) dropdown: ElementRef;
  buildings: Array<string> = ['Building C', 'Building D', 'Building E', 'Building F'];
  
  // on coordinates open menu 
  onTouch(args: TouchGestureEventData) {

    this.x = args.getX();
    this.y = args.getY();

    // draw marker
    let markerImage = new Image();
    markerImage.src = "res://logo";
    markerImage.loadMode = 'sync';
    markerImage.onLoaded();
    console.log("Loaded: ",markerImage.isLoaded) 

    console.log("Touch point: [" + this.x + ", " + this.y + "]");

    this.getCoords(this.x, this.y);

    this.dropdown.nativeElement.open();
  }

  public onchange(args: SelectedIndexChangedEventData) {
    console.log(`Drop Down selected index changed from ${args.oldIndex} to ${args.newIndex}`);

    let btnId: number = args.newIndex;

    // takes coordinates, draw marker, index change draw line
    // draw path here
    switch (btnId) {
      case 0: {
        break;
      }
      case 1: {
        break;
      }
      case 2: {
        break;
      }
      case 3: {
        break;
      }
      default: {
        break;
      }
    }
  }

  // public draw() {
  //   const paint = new Paint();
  //   paint.strokeWidth = 10;
  // }

}
